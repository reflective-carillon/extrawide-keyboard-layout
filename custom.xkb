// "Extra wide" ergonomic layout for a non-split keyboard, colemak/qwerty.

// Caveats:

// This is messy code. I figured it would be better to provide it than not,
// and hopefully it might be useful to someone, but I haven't cleaned it up.

// I haven't given any thought to portability. It works on my ThinkPad running ubuntu...

// I couldn't get groups to work properly, so I used a modifier key and some custom types
// to fake having two groups. To avoid confusing anyone just starting out with xkb, I will
// clarify. This is what the code looks like:

//    key <AB07> {
//        type= "M01FN_ALPHA_MOD3_ALPHA",
//        symbols[Group1]= [               k,               K,          Home,              n, N ]
//    };

// with the Colemak keys (k,K) in the same bracketed list as the QWERTY keys (n,N).
// But it should really look like this:

//    key <AB07> {
//        type= "M01FN_ALPHA",
//        symbols[Group1]= [               k,               K,          Home ],
//        symbols[Group2]= [               n,               N,          Home ]
//    };

xkb_keymap {
xkb_keycodes "evdev+aliases(qwerty)" {
    minimum = 8;
    maximum = 255;
     <ESC> = 9;
    <AE01> = 10;
    <AE02> = 11;
    <AE03> = 12;
    <AE04> = 13;
    <AE05> = 14;
    <AE06> = 15;
    <AE07> = 16;
    <AE08> = 17;
    <AE09> = 18;
    <AE10> = 19;
    <AE11> = 20;
    <AE12> = 21;
    <BKSP> = 22;
     <TAB> = 23;
    <AD01> = 24;
    <AD02> = 25;
    <AD03> = 26;
    <AD04> = 27;
    <AD05> = 28;
    <AD06> = 29;
    <AD07> = 30;
    <AD08> = 31;
    <AD09> = 32;
    <AD10> = 33;
    <AD11> = 34;
    <AD12> = 35;
    <RTRN> = 36;
    <LCTL> = 37;
    <AC01> = 38;
    <AC02> = 39;
    <AC03> = 40;
    <AC04> = 41;
    <AC05> = 42;
    <AC06> = 43;
    <AC07> = 44;
    <AC08> = 45;
    <AC09> = 46;
    <AC10> = 47;
    <AC11> = 48;
    <TLDE> = 49;
    <LFSH> = 50;
    <BKSL> = 51;
    <AB01> = 52;
    <AB02> = 53;
    <AB03> = 54;
    <AB04> = 55;
    <AB05> = 56;
    <AB06> = 57;
    <AB07> = 58;
    <AB08> = 59;
    <AB09> = 60;
    <AB10> = 61;
    <RTSH> = 62;
    <LALT> = 64;
    <SPCE> = 65;
    <CAPS> = 66;
    <FK01> = 67;
    <FK02> = 68;
    <FK03> = 69;
    <FK04> = 70;
    <FK05> = 71;
    <FK06> = 72;
    <FK07> = 73;
    <FK08> = 74;
    <FK09> = 75;
    <FK10> = 76;
    <NMLK> = 77;
    <SCLK> = 78;
    <FK11> = 95;
    <FK12> = 96;
    <RCTL> = 105;
    <PRSC> = 107;
    <RALT> = 108;
    <HOME> = 110;
      <UP> = 111;
    <PGUP> = 112;
    <LEFT> = 113;
    <RGHT> = 114;
     <END> = 115;
    <DOWN> = 116;
    <PGDN> = 117;
     <INS> = 118;
    <DELE> = 119;
    <MUTE> = 121;
    <VOL-> = 122;
    <VOL+> = 123;
    <POWR> = 124;
    <I126> = 126;
    <PAUS> = 127;
    <I129> = 129;
    <LWIN> = 133;
    <RWIN> = 134;
    <COMP> = 135;
    <STOP> = 136;
    <AGAI> = 137;
    <UNDO> = 139;
    <OPEN> = 142;
    <PAST> = 143;
    <FIND> = 144;
     <CUT> = 145;
    <I187> = 187;
    <I188> = 188;
    <I189> = 189;
    <I190> = 190;
    <MDSW> = 203;
     <ALT> = 204;
    <META> = 205;
    <SUPR> = 206;
    <HYPR> = 207;
    <I232> = 232;
    <I233> = 233;
    <I237> = 237;
    <I238> = 238;
    indicator 1 = "Caps Lock";
    virtual indicator 12 = "Shift Lock";
};

xkb_types "complete" {

    virtual_modifiers NumLock,Alt,LevelThree,LAlt,RAlt,RControl,LControl,ScrollLock,LevelFive,AltGr,Meta,Super,Hyper;

    type "ONE_LEVEL" {
        modifiers= none;
        level_name[Level1]= "Any";
    };
    type "TWO_LEVEL" {
        modifiers= Shift;
        map[Shift]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
    };
    type "ALPHABETIC" {
        modifiers= Shift+Lock;
        map[Shift]= Level2;
        map[Lock]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Caps";
    };
    type "KEYPAD" {
        modifiers= Shift+NumLock;
        map[Shift]= Level2;
        map[NumLock]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Number";
    };
    type "PC_CONTROL_LEVEL2" {
        modifiers= Control;
        map[Control]= Level2;
        level_name[Level1]= "Base";
        level_name[Level2]= "Control";
    };
    type "CTRL+ALT" {
        modifiers= Shift+Control+Alt+LevelThree;
        map[Shift]= Level2;
        preserve[Shift]= Shift;
        map[LevelThree]= Level3;
        map[Shift+LevelThree]= Level4;
        preserve[Shift+LevelThree]= Shift;
        map[Control+Alt]= Level5;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "Alt Base";
        level_name[Level4]= "Shift Alt";
        level_name[Level5]= "Ctrl+Alt";
    };
    // Like the "fn" key on the Model01.
    type "M01FN" {
        modifiers= Shift+Mod5;
        map[Shift]= Level2;
        map[Mod5]= Level3;
        map[Shift+Mod5]= Level3;
	preserve[Shift+Mod5]= Shift;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "M01fn";
    };
    type "M01FN_ALPHA" {
        modifiers= Shift+Lock+Mod5;
        map[Shift]= Level2;
        map[Lock]= Level2;
        map[Mod5]= Level3;
        map[Shift+Mod5]= Level3;
        map[Lock+Mod5]= Level3;
	map[Shift+Lock+Mod5]= Level3;
	preserve[Shift+Mod5]= Shift;
	preserve[Shift+Lock+Mod5]= Shift;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "M01fn";
    };
    type "M01FN_FOUR_LEVEL" {
        modifiers= Shift+Mod5;
        map[Shift]= Level2;
        map[Mod5]= Level3;
        map[Shift+Mod5]= Level4;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "M01fn";
        level_name[Level4]= "Shift M01fn";
    };
    // ISO_Next_Group doesn't work on my system? (It immediately switches back.)
    // As substitute for using groups, we lock Mod3 to simulate "Group 2".
    // When doing this with, usually both "groups" are alphabetic.
    // But when switching between QWERTY and Colemak-DH, the semicolon moves
    // between 2 keys, which are thus only alphabetic in one of the two layouts.
    type "ALPHA_MOD3_ALPHA" {
        modifiers= Shift+Lock+Mod3;
        map[Shift]= Level2;
        map[Lock]= Level2;
	map[Mod3]= Level3;
	map[Shift+Mod3]= Level4;
	map[Lock+Mod3]= Level4;
	map[Shift+Lock+Mod3]= Level3;
        level_name[Level1]= "Base";
        level_name[Level2]= "Caps";
	level_name[Level3]= "Group 2 Base";
	level_name[Level4]= "Group 2 Caps";
    };
    type "M01FN_ALPHA_MOD3_ALPHA" {
        modifiers= Shift+Lock+Mod5+Mod3;
        map[Shift]= Level2;
        map[Lock]= Level2;
        map[Mod5]= Level3;
        map[Shift+Mod5]= Level3;
        map[Lock+Mod5]= Level3;
	map[Shift+Lock+Mod5]= Level3;
	preserve[Shift+Mod5]= Shift;
	preserve[Shift+Lock+Mod5]= Shift;
	map[Mod3]= Level4;
	map[Mod3+Shift]= Level5;
	map[Mod3+Lock]= Level5;
	map[Mod3+Shift+Lock]= Level4;
	map[Mod3+Mod5]= Level3;
        map[Mod3+Shift+Mod5]= Level3;
        map[Mod3+Lock+Mod5]= Level3;
	map[Mod3+Shift+Lock+Mod5]= Level3;
	preserve[Mod3+Shift+Mod5]= Shift;
	preserve[Mod3+Shift+Lock+Mod5]= Shift;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "M01fn";
        level_name[Level4]= "Group 2 Base";
        level_name[Level5]= "Group 2 Shift";
    };
    // Used only for ;/p
    type "M01FN_MOD3_ALPHA" {
        modifiers= Shift+Lock+Mod5+Mod3;
        map[Shift]= Level2;
        map[Mod5]= Level3;
        map[Shift+Mod5]= Level3;
	preserve[Shift+Mod5]= Shift;
	map[Mod3]= Level4;
	map[Mod3+Shift]= Level5;
	map[Mod3+Lock]= Level5;
	map[Mod3+Shift+Lock]= Level4;
	map[Mod3+Mod5]= Level3;
        map[Mod3+Shift+Mod5]= Level3;
        map[Mod3+Lock+Mod5]= Level3;
	map[Mod3+Shift+Lock+Mod5]= Level3;
	preserve[Mod3+Shift+Mod5]= Shift;
	preserve[Mod3+Shift+Lock+Mod5]= Shift;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "M01fn";
        level_name[Level4]= "Group 2 Base";
        level_name[Level5]= "Group 2 Shift";
    };
    // Used only for o/;
    type "ALPHA_MOD3" {
        modifiers= Shift+Lock+Mod3;
        map[Shift]= Level2;
        map[Lock]= Level2;
	map[Mod3]= Level3;
	map[Mod3+Shift]= Level4;
	map[Mod3+Lock]= Level3;
	map[Mod3+Shift+Lock]= Level4;
        level_name[Level1]= "Base";
        level_name[Level2]= "Shift";
        level_name[Level3]= "Group 2 Base";
        level_name[Level4]= "Group 2 Shift";
    };
};

xkb_compatibility "complete" {

    virtual_modifiers NumLock,Alt,LevelThree,LAlt,RAlt,RControl,LControl,ScrollLock,LevelFive,AltGr,Meta,Super,Hyper;

    interpret.useModMapMods= AnyLevel;
    interpret.repeat= False;        
    interpret.locking= False;
    interpret ISO_Level2_Latch+Exactly(Shift) {
        useModMapMods=level1;
        action= LatchMods(modifiers=Shift,clearLocks,latchToLock);
    };
    interpret Shift_Lock+AnyOf(Shift+Lock) {
        action= LockMods(modifiers=Shift);
    };
    interpret Num_Lock+AnyOf(all) {
        virtualModifier= NumLock;
        action= LockMods(modifiers=NumLock);
    };
    interpret ISO_Level3_Shift+AnyOf(all) {
        virtualModifier= LevelThree;
        useModMapMods=level1;
        action= SetMods(modifiers=LevelThree,clearLocks);
    };
    interpret ISO_Level3_Latch+AnyOf(all) {
        virtualModifier= LevelThree;
        useModMapMods=level1;
        action= LatchMods(modifiers=LevelThree,clearLocks,latchToLock);
    };
    interpret ISO_Level3_Lock+AnyOf(all) {
        virtualModifier= LevelThree;
        useModMapMods=level1;
        action= LockMods(modifiers=LevelThree);
    };
    interpret Alt_R+AnyOf(all) {
        virtualModifier= Alt;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Meta_L+AnyOf(all) {
        virtualModifier= Meta;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Meta_R+AnyOf(all) {
        virtualModifier= Meta;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Super_L+AnyOf(all) {
        virtualModifier= Super;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Super_R+AnyOf(all) {
        virtualModifier= Super;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Hyper_L+AnyOf(all) {
        virtualModifier= Hyper;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Hyper_R+AnyOf(all) {
        virtualModifier= Hyper;
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    interpret Scroll_Lock+AnyOf(all) {
        virtualModifier= ScrollLock;
        action= LockMods(modifiers=modMapMods);
    };
    interpret ISO_Level5_Shift+AnyOf(all) {
        virtualModifier= LevelFive;
        useModMapMods=level1;
        action= SetMods(modifiers=LevelFive,clearLocks);
    };
    interpret ISO_Level5_Latch+AnyOf(all) {
        virtualModifier= LevelFive;
        useModMapMods=level1;
        action= LatchMods(modifiers=LevelFive,clearLocks,latchToLock);
    };
    interpret ISO_Level5_Lock+AnyOf(all) {
        virtualModifier= LevelFive;
        useModMapMods=level1;
        action= LockMods(modifiers=LevelFive);
    };
    interpret Mode_switch+AnyOfOrNone(all) {
        virtualModifier= AltGr;
        useModMapMods=level1;
        action= SetGroup(group=+1);
    };
    interpret ISO_Level3_Shift+AnyOfOrNone(all) {
        action= SetMods(modifiers=LevelThree,clearLocks);
    };
    interpret ISO_Level3_Latch+AnyOfOrNone(all) {
        action= LatchMods(modifiers=LevelThree,clearLocks,latchToLock);
    };
    interpret ISO_Level3_Lock+AnyOfOrNone(all) {
        action= LockMods(modifiers=LevelThree);
    };
    interpret ISO_Group_Latch+AnyOfOrNone(all) {
        virtualModifier= AltGr;
        useModMapMods=level1;
        action= LatchGroup(group=2);
    };
    interpret ISO_Next_Group+AnyOfOrNone(all) {
        virtualModifier= AltGr;
        useModMapMods=level1;
        action= LockGroup(group=+1);
    };
    interpret ISO_Prev_Group+AnyOfOrNone(all) {
        virtualModifier= AltGr;
        useModMapMods=level1;
        action= LockGroup(group=-1);
    };
    interpret ISO_First_Group+AnyOfOrNone(all) {
        action= LockGroup(group=1);
    };
    interpret ISO_Last_Group+AnyOfOrNone(all) {
        action= LockGroup(group=2);
    };
    interpret AccessX_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=AccessXKeys);
    };
    interpret AccessX_Feedback_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=AccessXFeedback);
    };
    interpret RepeatKeys_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=RepeatKeys);
    };
    interpret SlowKeys_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=SlowKeys);
    };
    interpret BounceKeys_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=BounceKeys);
    };
    interpret StickyKeys_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=StickyKeys);
    };
    interpret MouseKeys_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=MouseKeys);
    };
    interpret MouseKeys_Accel_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=MouseKeysAccel);
    };
    interpret Overlay1_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=Overlay1);
    };
    interpret Overlay2_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=Overlay2);
    };
    interpret AudibleBell_Enable+AnyOfOrNone(all) {
        action= LockControls(controls=AudibleBell);
    };
    interpret Terminate_Server+AnyOfOrNone(all) {
        action= Terminate();
    };
    interpret Alt_R+AnyOfOrNone(all) {
        action= SetMods(modifiers=Alt,clearLocks);
    };
    interpret Meta_L+AnyOfOrNone(all) {
        action= SetMods(modifiers=Meta,clearLocks);
    };
    interpret Meta_R+AnyOfOrNone(all) {
        action= SetMods(modifiers=Meta,clearLocks);
    };
    interpret Super_L+AnyOfOrNone(all) {
        action= SetMods(modifiers=Super,clearLocks);
    };
    interpret Hyper_R+AnyOfOrNone(all) {
        action= SetMods(modifiers=Hyper,clearLocks);
    };
    interpret Shift_L+AnyOfOrNone(all) {
        action= SetMods(modifiers=Shift,clearLocks);
    };
    interpret ISO_Level5_Shift+AnyOfOrNone(all) {
        action= SetMods(modifiers=LevelFive,clearLocks);
    };
    interpret ISO_Level5_Latch+AnyOfOrNone(all) {
        action= LatchMods(modifiers=LevelFive,clearLocks,latchToLock);
    };
    interpret ISO_Level5_Lock+AnyOfOrNone(all) {
        action= LockMods(modifiers=LevelFive);
    };
    interpret Caps_Lock+AnyOfOrNone(all) {
        action= LockMods(modifiers=Lock);
    };
    interpret Any+Exactly(Lock) {
        action= LockMods(modifiers=Lock);
    };
    interpret Any+AnyOf(all) {
        action= SetMods(modifiers=modMapMods,clearLocks);
    };
    group 2 = AltGr;
    group 3 = AltGr;
    group 4 = AltGr;
    indicator "Caps Lock" {
        !allowExplicit;
        whichModState= locked;
        modifiers= Mod3;
    };
 // Uncomment to enable one-shot modifiers.
 //   interpret Control_L+AnyOfOrNone(all) {
 //       action= LatchMods(modifiers=Control,clearLocks,latchToLock);
 //   };
 //   interpret Control_R+AnyOfOrNone(all) {
 //       action= LatchMods(modifiers=Control,clearLocks,latchToLock);
 //   };
 //   interpret Alt_L+AnyOfOrNone(all) {
 //       action= LatchMods(modifiers=Mod1,clearLocks,latchToLock);
 //   };
    interpret Super_R+AnyOfOrNone(all) {
        action= LockMods(modifiers=Mod3);
    };
};

xkb_symbols "custom" {

    name[group1]="Colemak Extra Wide - English (US)";
    name[group2]="QWERTY Extra Wide - English (US)";

    // ----- Function key row ----- //

    key  <ESC> {
        type= "M01FN",
	// C-M-% runs a command to set the keyboard layout to normal QWERTY, for guests.
        symbols[Group1]= [         NoSymbol,          Escape,         Super_R ],
	actions[Group1]= [  RedirectKey(key=<AE04>, mods=Control+Shift+Mod1), NoAction(), LockMods(modifiers=Mod3) ]
    };
    key <FK01> {
        type= "CTRL+ALT",
        symbols[Group1]= [              F1,              F1,              F1,              F1, XF86Switch_VT_1 ]
    };
    key <FK02> {
        type= "CTRL+ALT",
        symbols[Group1]= [              F2,              F2,              F2,              F2, XF86Switch_VT_2 ]
    };
    key <FK03> {
        type= "CTRL+ALT",
        symbols[Group1]= [              F3,              F3,              F3,              F3, XF86Switch_VT_3 ]
    };
    key <FK04> {
        type= "CTRL+ALT",
        symbols[Group1]= [              F4,              F4,              F4,              F4, XF86Switch_VT_4 ]
    };
    key <FK05> {
        type= "CTRL+ALT",
        symbols[Group1]= [              F5,              F5,              F5,              F5, XF86Switch_VT_5 ]
    };
    key <FK06> {
        type= "CTRL+ALT",
        symbols[Group1]= [              F6,              F6,              F6,              F6, XF86Switch_VT_6 ]
    };
    key <FK07> {
        type= "CTRL+ALT",
        symbols[Group1]= [              F7,              F7,              F7,              F7, XF86Switch_VT_7 ]
    };
    key <FK08> {
        type= "CTRL+ALT",
        symbols[Group1]= [              F8,              F8,              F8,              F8, XF86Switch_VT_8 ]
    };
    key <FK09> {
        type= "CTRL+ALT",
        symbols[Group1]= [              F9,              F9,              F9,              F9, XF86Switch_VT_9 ]
    };
    key <FK10> {
        type= "CTRL+ALT",
        symbols[Group1]= [             F10,             F10,             F10,             F10, XF86Switch_VT_10 ]
    };
    key <FK11> {
        type= "CTRL+ALT",
        symbols[Group1]= [             F11,             F11,             F11,             F11, XF86Switch_VT_11 ]
    };
    key <FK12> {
        type= "CTRL+ALT",
        symbols[Group1]= [             F12,             F12,             F12,             F12, XF86Switch_VT_12 ]
    };


    // ----- Number row ----- //

    key <TLDE> {         [               1,          exclam ] };
    key <AE01> {         [               2,              at ] };
    key <AE02> {         [               3,      numbersign ] };
    key <AE03> {         [               4,          dollar ] };
    key <AE04> {         [               5,         percent ] };
    key <AE05> {         [         Super_L ] };
    key <AE06> {         [       Caps_Lock ] };
    key <AE07> {         [               6,     asciicircum ] };
    key <AE08> {         [               7,       ampersand] };
    key <AE09> {         [               8,        asterisk] };
    key <AE10> {         [               9,      parenleft ] };
    key <AE11> {         [               0,      parenright ] };
    key <AE12> {         [           minus,      underscore ] };
    key <BKSP> {         [           equal,            plus ] };

    // ----- Upper letter row ----- //

    key  <TAB> {         [               q,               Q ] };
    key <AD01> {
        type= "ALPHABETIC",
        symbols[Group1]= [               w,               W ]
    };
    key <AD02> {
        type= "ALPHA_MOD3_ALPHA",
        symbols[Group1]= [               f,               F,                             e, E ]
    };
    key <AD03> {
        type= "ALPHA_MOD3_ALPHA",
        symbols[Group1]= [               p,               P,                             r, R ]
    };
    key <AD04> {
        type= "ALPHA_MOD3_ALPHA",
        symbols[Group1]= [               b,               B,                             t, T ]
    };
    key <AD05> {         [           grave,      asciitilde ] };
    key <AD06> {         [       Multi_key ] };
    key <AD07> {
        type= "ALPHA_MOD3_ALPHA",
        symbols[Group1]= [               j,               J,                             y, Y ]
    };
    key <AD08> {
        type= "M01FN_ALPHA_MOD3_ALPHA",
        symbols[Group1]= [               l,               L,     braceleft,              u, U ]
    };
    key <AD09> {
        type= "M01FN_ALPHA_MOD3_ALPHA",
        symbols[Group1]= [               u,               U,     braceright,             i, I ]
    };
    key <AD10> {
        type= "M01FN_ALPHA_MOD3_ALPHA",
        symbols[Group1]= [               y,               Y,    bracketleft,             o, O ]
    };
    key <AD11> {
        type= "M01FN_MOD3_ALPHA",
        symbols[Group1]= [       semicolon,           colon,   bracketright,             p, P ]
    };
    key <AD12> {         [       backslash,             bar ] };
    key <BKSL> {         [       Multi_key ] };

    // ----- Middle letter row ----- //

    key <CAPS> {         [               a,               A ] };
    key <AC01> {
        type= "M01FN_ALPHA_MOD3_ALPHA",
        symbols[Group1]= [               r,               R,         Escape,             s, S ]
    };
    key <AC02> {
        type= "M01FN_ALPHA_MOD3_ALPHA",
        symbols[Group1]= [               s,               S,         Escape,             d, D ]
    };
    key <AC03> {
        type= "M01FN_ALPHA_MOD3_ALPHA",
        symbols[Group1]= [               t,               T,         Escape,             f, F ]
    };
    key <AC04> {
        type= "ALPHABETIC",
        symbols[Group1]= [               g,               G ]
    };
    key <AC05> { [                     Tab,    ISO_Left_Tab ] };
    key <AC06> { [                  Return ] };
    key <AC07> {
        type= "M01FN_ALPHA_MOD3_ALPHA",
        symbols[Group1]= [               m,               M,           Left,             h, H ]
    };
    key <AC08> {
        type= "M01FN_ALPHA_MOD3_ALPHA",
        symbols[Group1]= [               n,               N,           Down,             j, J ]
    };
    key <AC09> {
        type= "M01FN_ALPHA_MOD3_ALPHA",
        symbols[Group1]= [               e,               E,             Up,             k, K ]
    };
    key <AC10> {
        type= "M01FN_ALPHA_MOD3_ALPHA",
        symbols[Group1]= [               i,               I,          Right,             l, L ]
    };
    key <AC11> {
        type= "ALPHA_MOD3",
        symbols[Group1]= [               o,               O,                  semicolon, colon ]
    };
    key <RTRN> {         [      apostrophe,        quotedbl ] };

    // ----- Lower letter row ----- //

    key <LFSH> {         [               x,               X ] };
    key <AB01> {
        type= "ALPHABETIC",
        symbols[Group1]= [               c,               C ]
    };
    key <AB02> {
        type= "M01FN_ALPHA_MOD3_ALPHA",
        symbols[Group1]= [               d,               D,         Escape,             v, V ]
    };
    key <AB03> {
        type= "ALPHA_MOD3_ALPHA",
        symbols[Group1]= [               v,               V,                             b, B ]
    };
    key <AB04> {
        type= "ALPHABETIC",
        symbols[Group1]= [               z,               Z ]
    };
    key <AB05> {         [               Escape ] };
    key <AB06> {         [               Return ] };
    key <AB07> {
        type= "M01FN_ALPHA_MOD3_ALPHA",
        symbols[Group1]= [               k,               K,          Home,              n, N ]
    };
    key <AB08> {
        type= "M01FN_ALPHA_MOD3_ALPHA",
        symbols[Group1]= [               h,               H,          Next,              m, M ]
    };
    key <AB09> {
        type= "M01FN",
        symbols[Group1]= [           comma,            less,         Prior ]
    };
    key <AB10> {
        type= "M01FN",
        symbols[Group1]= [          period,         greater,           End ]
    };
    key <RTSH> {
        type= "M01FN_FOUR_LEVEL",
        symbols[Group1]= [           slash,        question,   backslash, bar ]
    };

    // ----- Thumb keys ----- //

    key <LCTL> {         [         Control_L ] };
    key <LWIN> {         [  ISO_Level5_Shift ] };
    key <LALT> {         [         BackSpace ] };
    key <SPCE> {         [           Shift_R ] };
    key <RALT> {         [             space ] };
    key <PRSC> {         [             Alt_L ] };
    key <RCTL> {         [         Control_R ] };

    // ----- Misc ----- //

    key <NMLK> {         [        Num_Lock ] };
    key <SCLK> {         [     Scroll_Lock ] };
    key <HOME> {         [            Home ] };
    key   <UP> {         [              Up ] };
    key <PGUP> {         [           Prior ] };
    key <LEFT> {         [            Left ] };
    key <RGHT> {         [           Right ] };
    key  <END> {         [             End ] };
    key <DOWN> {         [            Down ] };
    key <PGDN> {         [            Next ] };
    key  <INS> {         [          Insert ] }; 
    key <DELE> {         [          KP_Delete ] };
    key <MUTE> {         [   XF86AudioMute ] };
    key <VOL-> {         [ XF86AudioLowerVolume ] };
    key <VOL+> {         [ XF86AudioRaiseVolume ] };
    key <POWR> {         [    XF86PowerOff ] };
    key <I126> {         [       plusminus ] };
    key <PAUS> {
        type= "PC_CONTROL_LEVEL2",
        symbols[Group1]= [           Pause,           Break ]
    };
    key <I129> {         [      KP_Decimal,      KP_Decimal ] };

    key <RWIN> {         [         Super_R ] };
    key <COMP> {         [            Menu ] };
    key <STOP> {         [          Cancel ] };
    key <AGAI> {         [            Redo ] };
    key <UNDO> {         [            Undo ] };
    key <OPEN> {         [        XF86Open ] };
    key <PAST> {         [       XF86Paste ] };
    key <FIND> {         [            Find ] };
    key  <CUT> {         [         XF86Cut ] };
    key <I187> {         [       parenleft ] };
    key <I188> {         [      parenright ] };
    key <I189> {         [         XF86New ] };
    key <I190> {         [            Redo ] };
    key <MDSW> {         [     r ] };
    key  <ALT> {         [        NoSymbol,           Alt_L ] };
    key <META> {         [        NoSymbol,          Meta_L ] };
    key <SUPR> {         [        NoSymbol,         Super_L ] };
    key <HYPR> {         [        NoSymbol,         Hyper_L ] };
    key <I232> {         [ XF86MonBrightnessDown ] };
    key <I233> {         [ XF86MonBrightnessUp ] };
    key <I237> {         [ XF86KbdBrightnessDown ] };
    key <I238> {         [ XF86KbdBrightnessUp ] };

    // Thumb mods
    modifier_map Control { <LCTL> };
    modifier_map Mod5 { <LWIN> };
    modifier_map Shift { <SPCE> };
    modifier_map Mod1 { <PRSC> };
    modifier_map Control { <RCTL> };

    // Number row mods
    modifier_map Mod4 { <AE05> };
    modifier_map Lock { <AE06> };

    // Leftover mods
    modifier_map Mod2 { <NMLK> };
    modifier_map Mod4 { <RWIN> };
    modifier_map Mod1 { <META> };
    modifier_map Mod4 { <SUPR> };
    modifier_map Mod4 { <HYPR> };
};

};
